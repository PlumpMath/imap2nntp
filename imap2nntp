#!/usr/bin/env python

# imap2nntp - Feed the contents of an IMAP mailbox to Leafnode, then delete
# every message it was able to feed by moving that message to Gmail's Trash.
#
# Which messages go into which newsgroups is determined by the file
# ~/.leafnode/group.mappings, which looks like this:
#
#   c++std-all@accu.org			wg21.c++.all
#   c++std-lib@accu.org			wg21.c++.lib
#   c++std-core@accu.org		wg21.c++.core
#   c++std-ext@accu.org			wg21.c++.ext
#   c++std-news@accu.org		wg21.c++.news
#   c++std-compat@accu.org		wg21.c++.compat
#   kona-date-lib@googlegroups.com	wg21.c++.date-lib
#
# Messages carbon copied between lists are appropriately cross-posted.
#
# The mailbox(es) to process with this script are passed as arguments.  Here
# is how I run it after getting new mail, but before fetching new news:
#
#   imap2nntp --no-login -s localhost -u johnw Lists.WG21.Reflector
#
# I use --no-login because I talk with Dovecot directly, and no login is
# required.

import os
import re
import sys
import csv
import time
import email
import string
import imaplib
import getpass
import optparse
import subprocess

from os.path import join, isfile, isdir
from socket import gethostname
from email.Utils import getaddresses, make_msgid

parser = optparse.OptionParser(usage="usage: %prog [OPTS] <MAILBOX...>")

parser.add_option('-N', '--no-login', dest='no_login',
                  default=False, action='store_true',
                  help='Do not attempt logging in to the imap server')
parser.add_option('', '--copy', dest='no_delete',
                  default=False, action='store_true',
                  help='Copy messages into Leafnode, do not delete them from IMAP')
parser.add_option('-n', '--dry-run', dest='dry_run',
                  default=False, action='store_true',
                  help='Do not make any real changes, just give a preview')
parser.add_option('-v', '--verbose', dest='verbose',
                  default=False, action='store_true',
                  help='Display messages when meaningful things happen')
parser.add_option('-p', '--expunge', dest='expunge',
                  default=False, action='store_true',
                  help='Expunge each mailbox after deleting messages')
parser.add_option('-s', '--server', dest='server',
                  default='localhost', action='store',
                  help='Name or address of the IMAP server [%default]')
parser.add_option('-u', '--user', dest='user',
                  default=getpass.getuser(), action='store',
                  help='IMAP server address [%default]')
parser.add_option('-H', '--hostname', dest='hostname',
                  default=gethostname(), action='store',
                  help='Hostname to use in Message-Ids and Paths [%default]')
parser.add_option('-T', '--trash', dest='trash',
                  default=None, action='store',
                  help='Instead of just deleting messages, move them here')
parser.add_option('-M', '--mappings', dest='mappings', action='store',
                  default=join(os.environ['HOME'], '.leafnode',
                               'group.mappings'),
                  help='group.mappings file [%default]')
parser.add_option('-d', '--spooldir', dest='spooldir', action='store',
                  help='Leafnode spool directory')
parser.add_option('-F', '--config', dest='config', action='store',
                  default=join(os.environ['HOME'], '.leafnode'),
                  help='Leafnode config directory [%default]')
parser.add_option('-t', '--to', dest='always_to', action='store',
                  help='Act as though this addr appears in every To header')

opts, mailboxes = parser.parse_args()

if opts.dry_run:
    opts.verbose = True

if len(mailboxes) == 0:
    parser.error("Please specify a mailbox to process")
if not isfile(opts.mappings):
    parser.error("Could not find mappings file '%s'" % opts.mappings)
if not isdir(opts.spooldir):
    parser.error("Could not read Leafnode spool directory '%s'" % opts.spooldir)
if not isdir(opts.config):
    parser.error("Could not read Leafnode config directory '%s'" % opts.config)

groups = {}

with open(opts.mappings, 'r') as fd:
    for line in fd:
        addr, group = string.split(line)
        groups[addr.lower()] = group

hasport = None

with open(join(os.environ['HOME'], '.authinfo'), 'r') as fd:
    for line in fd:
        match = re.match(r'machine +(\S+) +login +(\S+) +' +
                         r'password +(\S+)( +port +([0-9]+))?', line)
        if match:
            machine, login, password, hasport, port = match.groups()
            if machine == opts.server and login == opts.user:
                break

if hasport and int(port) == 993:
    imap = imaplib.IMAP4_SSL(opts.server, int(port) if hasport else 993)
else:
    imap = imaplib.IMAP4(opts.server, int(port) if hasport else 143)

if not opts.no_login:
    imap.login(login, password)

pattern_uid = re.compile('\d+ \(UID (?P<uid>\d+)\)')

def parse_uid(data):
    return pattern_uid.match(data).group('uid')

written = 0

for mailbox in mailboxes:
    resp, count = imap.select(mailbox, readonly=opts.no_delete)
    if resp != 'OK':
        print 'Failed to select mailbox %s'
        continue

    count     = int(count[0])
    typ, data = imap.search(None, 'All')
    data      = data[0].split()
    deleted   = 0

    if count != len(data):
        print 'Mailbox message count %d does not match ALL query count %d' % \
            (count, len(data))

    for num in data:
        typ, data  = imap.fetch(num, '(RFC822)')
        msg        = email.message_from_string(data[0][1])
        tos        = msg.get_all('to', [])
        ccs        = msg.get_all('cc', [])
        reply_tos  = msg.get_all('reply-to', [])
        resent_tos = msg.get_all('resent-to', [])
        resent_ccs = msg.get_all('resent-cc', [])

        if opts.always_to:
            tos.append(opts.always_to)

        all_recipients = map(lambda x: x[1].lower(),
                             getaddresses(tos + ccs + reply_tos +
                                          resent_tos + resent_ccs))

        group_list = [groups[a] for a in all_recipients if a in groups]
        group_list = list(set(group_list))
        if not group_list:
            continue

        if 'Path' not in msg:
            msg['Path'] = opts.hostname + '!not-for-mail'

        # Make sure there is exactly one Message-Id header
        if 'Message-Id' in msg:
            msgid = msg['Message-Id']
            del msg['Message-Id']
        else:
            msgid = make_msgid(opts.hostname)
        msg['Message-Id'] = msgid

        # Add the mappings that caused this message to match to the
        # Newsgroups header, if not already present
        if 'Newsgroups' in msg:
            newsgroups = re.sub('\s+', '', msg['Newsgroups'])
            for group in string.split(newsgroups, ','):
                if group not in group_list:
                    group_list.append(group)
            del msg['Newsgroups']
        msg['Newsgroups'] = string.join(group_list, ',')

        if opts.verbose:
            print '%s:%s -> %s' % (mailbox, num, msg['Newsgroups'])

        path = join(opts.spooldir, 'in.coming',
                    time.strftime('%Y%m%dT%H%M%S') + '.' + str(num))
        if isfile(path):
            parser.error("Spool file '%s' already exists" % path)
            continue

        if not opts.dry_run:
            with open(path, 'w') as fd:
                fd.write(msg.as_string(unixfrom=True))

        written += 1

        if not opts.no_delete:
            resp, data = imap.fetch(num, "(UID)")
            msg_uid    = parse_uid(data[0])

            if not opts.dry_run:
                result = imap.uid('COPY', msg_uid, opts.trash)
                if result[0] == 'OK':
                    imap.uid('STORE', msg_uid , '+FLAGS', '(\Deleted)')
                    deleted += 1

    if deleted and opts.expunge and not opts.dry_run:
        if opts.verbose:
            print 'Expunging mailbox:', mailbox
        imap.expunge()

if opts.verbose:
    if opts.dry_run:
        if opts.no_delete:
            print 'Would have copied',
        else:
            print 'Would have transferred',
    else:
        if opts.no_delete:
            print 'Copied',
        else:
            print 'Transferred',
    print written, 'messages.'

imap.close()
imap.logout()

sys.exit(0)

### imap2nntp ends here
